task SetTitle(){
	let id		= [Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT)];
	let alpha1	= 255;
	let alpha2	= 0;
	let alpha3	= 255;
	let alpha4	= 0;
	let alpha5	= 0;
	let rgb		= [170,150,150];
	let i		= 0;
	let frame	= 0;
	let count	= 0;
	let timer	= 0;
	let rgb2	= 255;
	let ctr		= 0;
	let endc	= 0;
	let clearc	= 0;
	
	ObjEffect_SetTexture(id[0],imgt02);
	ObjEffect_SetTexture(id[1],imgt01);
	ObjEffect_SetTexture(id[2],imgt00);
	ObjEffect_SetTexture(id[3],imgw);
	loop(4){
	Obj_SetPosition(id[i],CenX+96,CenY);
	ObjEffect_SetRenderState(id[i],ALPHA);
	ObjEffect_SetPrimitiveType(id[i],PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetLayer(id[i],8);
	ObjEffect_CreateVertex(id[i],4);
	ObjEffect_SetVertexXY(id[i],0,640/-2,480/-2);
	ObjEffect_SetVertexXY(id[i],1,640/-2,480/2);
	ObjEffect_SetVertexXY(id[i],2,640/2,480/-2);
	ObjEffect_SetVertexXY(id[i],3,640/2,480/2);
	ObjEffect_SetVertexUV(id[i],0,0,0);
	ObjEffect_SetVertexUV(id[i],1,0,480);
	ObjEffect_SetVertexUV(id[i],2,640,0);
	ObjEffect_SetVertexUV(id[i],3,640,480);
	i++;
	}
	i=0;
	
	ObjEffect_SetVertexColor(id[0],0,alpha3,rgb[0],rgb[1],rgb[2]);
	ObjEffect_SetVertexColor(id[0],1,alpha3,rgb[0],rgb[1],rgb[2]);
	ObjEffect_SetVertexColor(id[0],2,alpha3,rgb[0],rgb[1],rgb[2]);
	ObjEffect_SetVertexColor(id[0],3,alpha3,rgb[0],rgb[1],rgb[2]);
	ObjEffect_SetVertexColor(id[1],0,alpha2,0,0,0);
	ObjEffect_SetVertexColor(id[1],1,alpha2,0,0,0);
	ObjEffect_SetVertexColor(id[1],2,alpha2,0,0,0);
	ObjEffect_SetVertexColor(id[1],3,alpha2,0,0,0);
	ObjEffect_SetVertexColor(id[3],0,alpha4,255,255,255);
	ObjEffect_SetVertexColor(id[3],1,alpha4,255,255,255);
	ObjEffect_SetVertexColor(id[3],2,alpha4,255,255,255);
	ObjEffect_SetVertexColor(id[3],3,alpha4,255,255,255);
	
	Loading(MaxX+90,MaxY-50,480);
	
	loop{
		let tact = GetCommonDataEx("title","act");
		frame++;
		if(frame==480){
			tact=1;
			SetCommonDataEx("title","act",tact);
		}
		
		if(tact==11||tact==14){clearc++;}
		if(tact!=11&&tact!=14){clearc=0;}
		if(clearc>=120){
			timer=0;
			ObjEffect_SetVertexColor(id[0],0,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[0],1,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[0],2,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[0],3,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[1],0,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[1],1,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[1],2,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[1],3,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[2],0,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[2],1,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[2],2,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[2],3,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[3],0,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[3],1,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[3],2,alpha5,255,255,255);
			ObjEffect_SetVertexColor(id[3],3,alpha5,255,255,255);
		}
		
		if(tact==1){
			if(alpha4<=0&&alpha1<=0){count++;}
			if(alpha4<255&&alpha1>=255){alpha4+=10;}
			if(alpha4>=255&&alpha1>0){alpha1-=10;}
			if(alpha4>0&&alpha1<=0){alpha4-=5;}
			ObjEffect_SetVertexColor(id[2],0,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],1,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],2,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],3,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[3],0,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],1,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],2,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],3,alpha4,255,255,255);
			if(count==1){SetLogo(0);PlayMusicSP(0);}
			Sparks(rand(MinX,MaxX),rand(MinY,MaxY),rand(70,110),rand(1,3),rand(0.01,0.1),255,0,255,120);
		}
		if(tact==2){
			timer++;
			if(rgb2<255){rgb2+=15;}
			if(alpha2<255){alpha2+=15;}
			ObjEffect_SetVertexColor(id[0],0,alpha3,rgb[0],rgb[1],rgb[2]);
			ObjEffect_SetVertexColor(id[0],1,alpha3,rgb[0],rgb[1],rgb[2]);
			ObjEffect_SetVertexColor(id[0],2,alpha3,rgb[0],rgb[1],rgb[2]);
			ObjEffect_SetVertexColor(id[0],3,alpha3,rgb[0],rgb[1],rgb[2]);
			ObjEffect_SetVertexColor(id[1],0,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],1,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],2,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],3,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[2],0,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],1,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],2,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[2],3,alpha1,255,255,255);
			ObjEffect_SetVertexColor(id[3],0,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],1,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],2,alpha4,255,255,255);
			ObjEffect_SetVertexColor(id[3],3,alpha4,255,255,255);
			if(timer==15){
				SetLogo(1);
				SetSelect();
			}
		}
		if(tact!=0&&tact!=1&&tact!=2&&tact!=10&&tact!=11&&tact!=14){
			if(alpha2>0){alpha2-=15;}
			ObjEffect_SetVertexColor(id[1],0,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],1,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],2,alpha2,rgb2,rgb2,rgb2);
			ObjEffect_SetVertexColor(id[1],3,alpha2,rgb2,rgb2,rgb2);
		}
		if(tact!=0&&tact!=1&&tact!=10&&tact!=11&&tact!=14){
			ctr++;
			//Load_Effect(rand(MinX-50,MaxX+250),rand(MinY-50,MaxY),rand(60,120),rand(0.5,0.7),60,255,0,100,8);
		}
		if(tact!=6&&tact!=10&&tact!=14&&tact!=11&&tact!=12&&tact!=13&&tact!=2&&ctr>120&&GetKeyState(VK_BOMB)==KEY_PUSH){
			tact=2;
			ctr=0;
			PlaySE(ket);
			SetCommonDataEx("title","act",tact);
			SetLogo(1);
			SetSelect();
		}
		if(tact==6&&ctr>120&&GetKeyState(VK_BOMB)==KEY_PUSH){
			tact=5;
			ctr=0;
			PlaySE(ket);
			Loading(MaxX+90,MaxY-50,120);
			SetCommonDataEx("title","act",tact);
		}
		if(tact==12&&ctr>120&&GetKeyState(VK_BOMB)==KEY_PUSH){
			tact=7;
			ctr=0;
			PlaySE(ket);
			SetCommonDataEx("title","act",tact);
		}
		if(tact==13&&ctr>120&&GetKeyState(VK_BOMB)==KEY_PUSH){
			tact=12;
			ctr=60;
			PlaySE(ket);
			SetCommonDataEx("title","act",tact);
		}
		
		if(tact==10){endc++;}
		if(endc==120){
			Obj_Delete(id[0]);
			Obj_Delete(id[1]);
			Obj_Delete(id[2]);
			Obj_Delete(id[3]);
			break;
		}
		yield;
	}
}

task SetSelect{
	let id		= [Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT),
					Obj_Create(OBJ_EFFECT)];
	let move1	= 0;
	let move2	= 0;
	let move3	= 0;
	let move4	= 0;
	let move5	= 0;
	let move6	= 0;
	let move7	= 0;
	let moveA	= 0;
	let moveB	= 0;
	let moveC	= 0;
	let moveD	= 0;
	let moveE	= 0;
	let moveF	= 0;
	let moveG	= 0;
	let i		= 0;
	let alpha	= 0;
	let dis		= 0;
	let disp	= 0;
	let angle	= 0;
	let light00	= 25;
	let light01	= 100;
	let light02	= 255;
	let rgb1	= [light02,light01,light01,light01,light01,light01,light01];
	let rgb2	= [light01,light02,light01,light01,light01,light01,light01,light00];//ex
	let rgb3	= [light01,light01,light02,light01,light01,light01,light01,light00];//pra
	let rgb4	= [light01,light01,light01,light02,light01,light01,light01,light00];//spellpra
	let rgb5	= [light01,light01,light01,light01,light02,light01,light01];
	let rgb6	= [light01,light01,light01,light01,light01,light02,light01];
	let rgb7	= [light01,light01,light01,light01,light01,light01,light02];
	let ctr		= 0;
	
	loop(7){
		ObjEffect_SetRenderState(id[i],ALPHA);
		ObjEffect_SetPrimitiveType(id[i],PRIMITIVE_TRIANGLESTRIP);
		ObjEffect_SetTexture(id[i],imgt03);
		ObjEffect_SetLayer(id[i],8);
		ObjEffect_SetScale(id[i],0.4,0.3);
		ObjEffect_CreateVertex(id[i],4);
		i++;
	}
	i=0;
	
	ObjEffect_SetVertexXY(id[0],0,192/-2,64/-2);
	ObjEffect_SetVertexXY(id[0],1,192/-2,64/2);
	ObjEffect_SetVertexXY(id[0],2,192/2,64/-2);
	ObjEffect_SetVertexXY(id[0],3,192/2,64/2);
	ObjEffect_SetVertexUV(id[0],0,54,53);
	ObjEffect_SetVertexUV(id[0],1,54,117);
	ObjEffect_SetVertexUV(id[0],2,246,53);
	ObjEffect_SetVertexUV(id[0],3,246,117);
	ObjEffect_SetVertexXY(id[1],0,192/-2,64/-2);
	ObjEffect_SetVertexXY(id[1],1,192/-2,64/2);
	ObjEffect_SetVertexXY(id[1],2,192/2,64/-2);
	ObjEffect_SetVertexXY(id[1],3,192/2,64/2);
	ObjEffect_SetVertexUV(id[1],0,54,153);
	ObjEffect_SetVertexUV(id[1],1,54,217);
	ObjEffect_SetVertexUV(id[1],2,246,153);
	ObjEffect_SetVertexUV(id[1],3,246,217);
	ObjEffect_SetVertexXY(id[2],0,242/-2,64/-2);
	ObjEffect_SetVertexXY(id[2],1,242/-2,64/2);
	ObjEffect_SetVertexXY(id[2],2,242/2,64/-2);
	ObjEffect_SetVertexXY(id[2],3,242/2,64/2);
	ObjEffect_SetVertexUV(id[2],0,54,253);
	ObjEffect_SetVertexUV(id[2],1,54,317);
	ObjEffect_SetVertexUV(id[2],2,295,253);
	ObjEffect_SetVertexUV(id[2],3,295,317);
	ObjEffect_SetVertexXY(id[3],0,232/-2,76/-2);
	ObjEffect_SetVertexXY(id[3],1,232/-2,76/2);
	ObjEffect_SetVertexXY(id[3],2,232/2,76/-2);
	ObjEffect_SetVertexXY(id[3],3,232/2,76/2);
	ObjEffect_SetVertexUV(id[3],0,54,353);
	ObjEffect_SetVertexUV(id[3],1,54,429);
	ObjEffect_SetVertexUV(id[3],2,286,353);
	ObjEffect_SetVertexUV(id[3],3,286,429);
	ObjEffect_SetVertexXY(id[4],0,202/-2,64/-2);
	ObjEffect_SetVertexXY(id[4],1,202/-2,64/2);
	ObjEffect_SetVertexXY(id[4],2,202/2,64/-2);
	ObjEffect_SetVertexXY(id[4],3,202/2,64/2);
	ObjEffect_SetVertexUV(id[4],0,54,453);
	ObjEffect_SetVertexUV(id[4],1,54,517);
	ObjEffect_SetVertexUV(id[4],2,256,453);
	ObjEffect_SetVertexUV(id[4],3,256,517);
	ObjEffect_SetVertexXY(id[5],0,110/-2,76/-2);
	ObjEffect_SetVertexXY(id[5],1,110/-2,76/2);
	ObjEffect_SetVertexXY(id[5],2,110/2,76/-2);
	ObjEffect_SetVertexXY(id[5],3,110/2,76/2);
	ObjEffect_SetVertexUV(id[5],0,54,553);
	ObjEffect_SetVertexUV(id[5],1,54,629);
	ObjEffect_SetVertexUV(id[5],2,163,553);
	ObjEffect_SetVertexUV(id[5],3,163,629);
	ObjEffect_SetVertexXY(id[6],0,74/-2,68/-2);
	ObjEffect_SetVertexXY(id[6],1,74/-2,68/2);
	ObjEffect_SetVertexXY(id[6],2,74/2,68/-2);
	ObjEffect_SetVertexXY(id[6],3,74/2,68/2);
	ObjEffect_SetVertexUV(id[6],0,54,653);
	ObjEffect_SetVertexUV(id[6],1,54,720);
	ObjEffect_SetVertexUV(id[6],2,128,653);
	ObjEffect_SetVertexUV(id[6],3,128,720);
	
	loop{
		let tstc = GetCommonDataEx("title","stc");
		let tex = GetCommonDataEx("title","ex");
		let tpr = GetCommonDataEx("title","practise");
		let tact = GetCommonDataEx("title","act");
		let gox = Obj_GetX(id[0]);
		let goy = Obj_GetY(id[0]);
		
		if(tact==2){
			if(move1<50&&tstc==0){moveA+=10;}
			if(move1>0&&tstc!=0){moveA-=10;}
			move1=50*sin(moveA);
			if(move2<50&&tstc==1){moveB+=10;}
			if(move2>0&&tstc!=1){moveB-=10;}
			move2=50*sin(moveB);
			if(move3<50&&tstc==2){moveC+=10;}
			if(move3>0&&tstc!=2){moveC-=10;}
			move3=50*sin(moveC);
			if(move4<50&&tstc==3){moveD+=10;}
			if(move4>0&&tstc!=3){moveD-=10;}
			move4=50*sin(moveD);
			if(move5<50&&tstc==4){moveE+=10;}
			if(move5>0&&tstc!=4){moveE-=10;}
			move5=50*sin(moveE);
			if(move6<50&&tstc==5){moveF+=10;}
			if(move6>0&&tstc!=5){moveF-=10;}
			move6=50*sin(moveF);
			if(move7<50&&tstc==6){moveG+=10;}
			if(move7>0&&tstc!=6){moveG-=10;}
			move7=50*sin(moveG);
		
			angle++;
			Obj_SetPosition(id[0],(MaxX+170)-move1,(CenY+30));
			Obj_SetPosition(id[1],(MaxX+170)-move2,(CenY+30)+30);
			Obj_SetPosition(id[2],(MaxX+170-8)-move3,(CenY+30)+60);//+8
			Obj_SetPosition(id[3],(MaxX+170-6)-move4,(CenY+30)+90);//+6
			Obj_SetPosition(id[4],(MaxX+170)-move5,(CenY+30)+120);//+0
			Obj_SetPosition(id[5],(MaxX+170+16)-move6,(CenY+30)+150);//-16
			Obj_SetPosition(id[6],(MaxX+170+22)-move7,(CenY+30)+180);//-22
		
			if(ctr>10&&tact==2&&tstc!=0&&GetKeyState(VK_UP)==KEY_PUSH){
				if(tstc==1){tstc=0;}
				else if(tstc==2&&tex==true){tstc=1;}
				else if(tstc==2&&tex==false){tstc=0;}
				else if(tstc==3){tstc=2;}
				else if(tstc==4&&tpr==true){tstc=3;}
				else if(tstc==4&&tpr==false&&tex==true){tstc=1;}
				else if(tstc==4&&tpr==false&&tex==false){tstc=0;}
				else if(tstc==5){tstc=4;}
				else if(tstc==6){tstc=5;}
				PlaySE(sel);
				SetCommonDataEx("title","stc",tstc);
			}
			if(ctr>10&&tact==2&&tstc!=6&&GetKeyState(VK_DOWN)==KEY_PUSH){
				if(tstc==0&&tex==true){tstc=1;}
				else if(tstc==0&&tex==false&&tpr==true){tstc=2;}
				else if(tstc==0&&tex==false&&tpr==false){tstc=4;}
				else if(tstc==1&&tpr==true){tstc=2;}
				else if(tstc==1&&tpr==false){tstc=4;}
				else if(tstc==2){tstc=3;}
				else if(tstc==3){tstc=4;}
				else if(tstc==4){tstc=5;}
				else if(tstc==5){tstc=6;}
				PlaySE(sel);
				SetCommonDataEx("title","stc",tstc);
			}
		
			if(ctr>30&&tact==2&&GetKeyState(VK_SHOT)==KEY_PUSH){
				if(tstc==0){tact=3;DiffiSelect();}//start
				else if(tstc==1){tact=4;DiffiSelect2();}//ex start
				else if(tstc==2){tact=5;DiffiSelect3();}//practise start
				else if(tstc==3){
				tact=7;
				SetCommonDataEx("title","act",7);
				SetSpellPractice00();
			}
			else if(tstc==4){
				tact=8;
				SetCommonDataEx("title","act",8);
				SetMusicRoomDisplayMain();
			}
			else if(tstc==5){
				tact=9;
				SetCommonDataEx("title","act",9);
				SetOption();
			}
			else if(tstc==6){
				SaveCommonDataEx("title",GetCurrentScriptDirectory~".\Title.dat");
				ClearStage;
			}
			ctr=0;
			PlaySE(ket);
			SetCommonDataEx("title","stc",tstc);
			SetCommonDataEx("title","act",tact);
			SetSelect2();
		}
		
		if(tact==2&&ctr<=30){ctr++;}
		if(tact!=2){ctr=0;}
		if(ctr>10&&GetKeyState(VK_BOMB)==KEY_PUSH){
			tstc=6;
			ctr=0;
			PlaySE(ket);
			SetCommonDataEx("title","stc",tstc);
		}
		
		if(alpha<255){alpha+=10;}
		ObjEffect_SetVertexColor(id[0],0,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
		ObjEffect_SetVertexColor(id[0],1,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
		ObjEffect_SetVertexColor(id[0],2,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
		ObjEffect_SetVertexColor(id[0],3,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
		if(tex==false){
			ObjEffect_SetVertexColor(id[1],0,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],1,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],2,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],3,alpha,rgb2[7],rgb2[7],rgb2[7]);
		}else if(tex==true){
			ObjEffect_SetVertexColor(id[1],0,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],1,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],2,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],3,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
		}
		if(tpr==false){
			ObjEffect_SetVertexColor(id[2],0,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],1,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],2,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],3,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[3],0,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],1,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],2,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],3,alpha,rgb4[7],rgb4[7],rgb4[7]);
		}else if(tpr==true){
			ObjEffect_SetVertexColor(id[2],0,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],1,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],2,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],3,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[3],0,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],1,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],2,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],3,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
		}
			ObjEffect_SetVertexColor(id[4],0,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],1,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],2,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],3,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[5],0,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],1,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],2,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],3,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[6],0,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],1,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],2,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],3,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
		}else if(tact!=2){
			if(alpha>0){alpha-=15;}
			ObjEffect_SetVertexColor(id[0],0,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
			ObjEffect_SetVertexColor(id[0],1,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
			ObjEffect_SetVertexColor(id[0],2,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
			ObjEffect_SetVertexColor(id[0],3,alpha,rgb1[tstc],rgb1[tstc],rgb1[tstc]);
		if(tex==false){
			ObjEffect_SetVertexColor(id[1],0,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],1,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],2,alpha,rgb2[7],rgb2[7],rgb2[7]);
			ObjEffect_SetVertexColor(id[1],3,alpha,rgb2[7],rgb2[7],rgb2[7]);
		}else if(tex==true){
			ObjEffect_SetVertexColor(id[1],0,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],1,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],2,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
			ObjEffect_SetVertexColor(id[1],3,alpha,rgb2[tstc],rgb2[tstc],rgb2[tstc]);
		}
		if(tpr==false){
			ObjEffect_SetVertexColor(id[2],0,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],1,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],2,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[2],3,alpha,rgb3[7],rgb3[7],rgb3[7]);
			ObjEffect_SetVertexColor(id[3],0,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],1,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],2,alpha,rgb4[7],rgb4[7],rgb4[7]);
			ObjEffect_SetVertexColor(id[3],3,alpha,rgb4[7],rgb4[7],rgb4[7]);
		}else if(tpr==true){
			ObjEffect_SetVertexColor(id[2],0,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],1,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],2,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[2],3,alpha,rgb3[tstc],rgb3[tstc],rgb3[tstc]);
			ObjEffect_SetVertexColor(id[3],0,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],1,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],2,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
			ObjEffect_SetVertexColor(id[3],3,alpha,rgb4[tstc],rgb4[tstc],rgb4[tstc]);
		}
			ObjEffect_SetVertexColor(id[4],0,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],1,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],2,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[4],3,alpha,rgb5[tstc],rgb5[tstc],rgb5[tstc]);
			ObjEffect_SetVertexColor(id[5],0,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],1,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],2,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[5],3,alpha,rgb6[tstc],rgb6[tstc],rgb6[tstc]);
			ObjEffect_SetVertexColor(id[6],0,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],1,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],2,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			ObjEffect_SetVertexColor(id[6],3,alpha,rgb7[tstc],rgb7[tstc],rgb7[tstc]);
			if(alpha<=0){
				Obj_Delete(id[0]);
				Obj_Delete(id[1]);
				Obj_Delete(id[2]);
				Obj_Delete(id[3]);
				Obj_Delete(id[4]);
				Obj_Delete(id[5]);
				Obj_Delete(id[6]);
				break;
			}
		}
		yield;
	}
}

task SetSelect2(){
	let id		= Obj_Create(OBJ_EFFECT);
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let tact	= GetCommonDataEx("title","act");
	
	Obj_SetPosition(id,MinX+100+move1,MinY+100);
	ObjEffect_SetRenderState(id,ALPHA);
	ObjEffect_SetTexture(id,imgt04);
	ObjEffect_SetPrimitiveType(id,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetLayer(id,8);
	ObjEffect_SetScale(id,0.65,0.65);
	ObjEffect_CreateVertex(id,4);
	
	alternative(tact)
	case(3,4,5){
	ObjEffect_SetVertexXY(id,0,350/-2,100/-2);
	ObjEffect_SetVertexXY(id,1,350/-2,100/2);
	ObjEffect_SetVertexXY(id,2,350/2,100/-2);
	ObjEffect_SetVertexXY(id,3,350/2,100/2);
	ObjEffect_SetVertexUV(id,0,62,44);
	ObjEffect_SetVertexUV(id,1,62,144);
	ObjEffect_SetVertexUV(id,2,412,44);
	ObjEffect_SetVertexUV(id,3,412,144);}
	case(6){
	ObjEffect_SetVertexXY(id,0,370/-2,92/-2);
	ObjEffect_SetVertexXY(id,1,370/-2,92/2);
	ObjEffect_SetVertexXY(id,2,370/2,92/-2);
	ObjEffect_SetVertexXY(id,3,370/2,92/2);
	ObjEffect_SetVertexUV(id,0,62,326);
	ObjEffect_SetVertexUV(id,1,62,418);
	ObjEffect_SetVertexUV(id,2,431,326);
	ObjEffect_SetVertexUV(id,3,431,418);}
	case(7){
	ObjEffect_SetVertexXY(id,0,394/-2,98/-2);
	ObjEffect_SetVertexXY(id,1,394/-2,98/2);
	ObjEffect_SetVertexXY(id,2,394/2,98/-2);
	ObjEffect_SetVertexXY(id,3,394/2,98/2);
	ObjEffect_SetVertexUV(id,0,60,579);
	ObjEffect_SetVertexUV(id,1,60,677);
	ObjEffect_SetVertexUV(id,2,454,579);
	ObjEffect_SetVertexUV(id,3,454,677);}
	case(8){
	ObjEffect_SetVertexXY(id,0,330/-2,100/-2);
	ObjEffect_SetVertexXY(id,1,330/-2,100/2);
	ObjEffect_SetVertexXY(id,2,330/2,100/-2);
	ObjEffect_SetVertexXY(id,3,330/2,100/2);
	ObjEffect_SetVertexUV(id,0,59,194);
	ObjEffect_SetVertexUV(id,1,59,294);
	ObjEffect_SetVertexUV(id,2,388,194);
	ObjEffect_SetVertexUV(id,3,388,294);}
	case(9){
	ObjEffect_SetVertexXY(id,0,192/-2,100/-2);
	ObjEffect_SetVertexXY(id,1,192/-2,100/2);
	ObjEffect_SetVertexXY(id,2,192/2,100/-2);
	ObjEffect_SetVertexXY(id,3,192/2,100/2);
	ObjEffect_SetVertexUV(id,0,63,448);
	ObjEffect_SetVertexUV(id,1,63,548);
	ObjEffect_SetVertexUV(id,2,255,448);
	ObjEffect_SetVertexUV(id,3,255,548);}

	loop{
		let tact	= GetCommonDataEx("title","act");
		
		if(move1<200){moveA+=5;}
		move1=200*sin(moveA);
		alternative(tact)
		case(3,4,5,6,8){
		Obj_SetPosition(id,MinX-120+move1,MinY+20);}
		case(7){
		Obj_SetPosition(id,MinX-100+move1,MinY+20);}
		case(9){
		Obj_SetPosition(id,MinX-165+move1,MinY+20);}
		
		if(move2<90&&tact==2){moveB+=5;}
		if(move2<90&&tact==10){moveB+=5;}
		if(move2<90&&tact==11){moveB+=5;}
		if(move2<90&&tact==14){moveB+=5;}
		move2=90*sin(moveB);
		ObjEffect_SetAngle(id,move2,move2,0);
		
		if(move2>=100){
			Obj_Delete(id);
			break;
		}
		yield;
	}
}

task SetLogo(type){
	let id		= [Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT),
				Obj_Create(OBJ_EFFECT)];
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let i		= 0;
	let alpha	= 0;
	let rgb		= [255,255,255];
	let dis		= 0;
	let disp	= 0;
	let angle	= 0;
	
	ObjEffect_SetTexture(id[0],imgtl00);
	ObjEffect_SetTexture(id[1],imgtl01);
	ObjEffect_SetTexture(id[2],imgtl02);
	ObjEffect_SetTexture(id[3],imgtl03);
	ObjEffect_SetTexture(id[4],imgtl04);
	ObjEffect_SetTexture(id[5],imgtl05);
	loop(6){
		Obj_SetPosition(id[i],CenX+96,CenY);
		ObjEffect_SetRenderState(id[i],ALPHA);
		ObjEffect_SetPrimitiveType(id[i],PRIMITIVE_TRIANGLESTRIP);
		ObjEffect_SetLayer(id[i],8);
		ObjEffect_SetScale(id[i],0.5,0.5);
		ObjEffect_CreateVertex(id[i],4);
		i++;
	}
	i=0;
	ObjEffect_SetVertexXY(id[0],0,362/-2,348/-2);
	ObjEffect_SetVertexXY(id[0],1,362/-2,348/2);
	ObjEffect_SetVertexXY(id[0],2,362/2,348/-2);
	ObjEffect_SetVertexXY(id[0],3,362/2,348/2);
	ObjEffect_SetVertexUV(id[0],0,0,0);
	ObjEffect_SetVertexUV(id[0],1,0,348);
	ObjEffect_SetVertexUV(id[0],2,362,0);
	ObjEffect_SetVertexUV(id[0],3,362,348);
	ObjEffect_SetVertexXY(id[1],0,432/-2,414/-2);
	ObjEffect_SetVertexXY(id[1],1,432/-2,414/2);
	ObjEffect_SetVertexXY(id[1],2,432/2,414/-2);
	ObjEffect_SetVertexXY(id[1],3,432/2,414/2);
	ObjEffect_SetVertexUV(id[1],0,0,0);
	ObjEffect_SetVertexUV(id[1],1,0,414);
	ObjEffect_SetVertexUV(id[1],2,432,0);
	ObjEffect_SetVertexUV(id[1],3,432,414);
	ObjEffect_SetVertexXY(id[2],0,612/-2,586/-2);
	ObjEffect_SetVertexXY(id[2],1,612/-2,586/2);
	ObjEffect_SetVertexXY(id[2],2,612/2,586/-2);
	ObjEffect_SetVertexXY(id[2],3,612/2,586/2);
	ObjEffect_SetVertexUV(id[2],0,0,0);
	ObjEffect_SetVertexUV(id[2],1,0,586);
	ObjEffect_SetVertexUV(id[2],2,612,0);
	ObjEffect_SetVertexUV(id[2],3,612,586);
	ObjEffect_SetVertexXY(id[3],0,562/-2,546/-2);
	ObjEffect_SetVertexXY(id[3],1,562/-2,546/2);
	ObjEffect_SetVertexXY(id[3],2,562/2,546/-2);
	ObjEffect_SetVertexXY(id[3],3,562/2,546/2);
	ObjEffect_SetVertexUV(id[3],0,0,0);
	ObjEffect_SetVertexUV(id[3],1,0,546);
	ObjEffect_SetVertexUV(id[3],2,562,0);
	ObjEffect_SetVertexUV(id[3],3,562,546);
	ObjEffect_SetVertexXY(id[4],0,368/-2,354/-2);
	ObjEffect_SetVertexXY(id[4],1,368/-2,354/2);
	ObjEffect_SetVertexXY(id[4],2,368/2,354/-2);
	ObjEffect_SetVertexXY(id[4],3,368/2,354/2);
	ObjEffect_SetVertexUV(id[4],0,0,0);
	ObjEffect_SetVertexUV(id[4],1,0,354);
	ObjEffect_SetVertexUV(id[4],2,368,0);
	ObjEffect_SetVertexUV(id[4],3,368,354);
	ObjEffect_SetVertexXY(id[5],0,960/-2,328/-2);
	ObjEffect_SetVertexXY(id[5],1,960/-2,328/2);
	ObjEffect_SetVertexXY(id[5],2,960/2,328/-2);
	ObjEffect_SetVertexXY(id[5],3,960/2,328/2);
	ObjEffect_SetVertexUV(id[5],0,0,0);
	ObjEffect_SetVertexUV(id[5],1,0,328);
	ObjEffect_SetVertexUV(id[5],2,960,0);
	ObjEffect_SetVertexUV(id[5],3,960,328);

	loop{
		let tact = GetCommonDataEx("title","act");
		
		if(type==0){
			Obj_Delete(id[5]);
			if(alpha<255){alpha+=10;}
			loop(5){
				ObjEffect_SetVertexColor(id[i],0,alpha,0,0,0);
				ObjEffect_SetVertexColor(id[i],1,alpha,0,0,0);
				ObjEffect_SetVertexColor(id[i],2,alpha,0,0,0);
				ObjEffect_SetVertexColor(id[i],3,alpha,0,0,0);
				i++;
			}
			i=0;
			if(dis<600){
				dis+=disp;
				angle+=5+disp;
				if(disp<5){
					disp+=0.05;
				}
			}
			if(dis>=600){
				tact=2;
				SetCommonDataEx("title","act",tact);
				Obj_Delete(id[0]);
				Obj_Delete(id[1]);
				Obj_Delete(id[2]);
				Obj_Delete(id[3]);
				Obj_Delete(id[4]);
				Obj_Delete(id[5]);
				break;
			}
				Obj_SetPosition(id[0],(CenX+96)+dis*sin(angle),CenY+dis*cos(angle));
				Obj_SetPosition(id[1],(CenX+96)+dis*sin(angle+72),CenY+dis*cos(angle+72));
				Obj_SetPosition(id[2],(CenX+96)+dis*sin(angle+72*2),CenY+dis*cos(angle+72*2));
				Obj_SetPosition(id[3],(CenX+96)+dis*sin(angle+72*3),CenY+dis*cos(angle+72*3));
				Obj_SetPosition(id[4],(CenX+96)+dis*sin(angle+72*4),CenY+dis*cos(angle+72*4));
		}
		else if(type==1){
			if(alpha<255){alpha+=10;}
			loop(6){
				ObjEffect_SetVertexColor(id[i],0,alpha,rgb[0],rgb[1],rgb[2]);
				ObjEffect_SetVertexColor(id[i],1,alpha,rgb[0],rgb[1],rgb[2]);
				ObjEffect_SetVertexColor(id[i],2,alpha,rgb[0],rgb[1],rgb[2]);
				ObjEffect_SetVertexColor(id[i],3,alpha,rgb[0],rgb[1],rgb[2]);
				i++;
			}
			i=0;
			
			if(move2<90&&tact!=2){moveB+=3;}
			move2=90*sin(moveB);
			
			if(move1<100){moveA+=2;}
			move1=100*sin(moveA);
			Obj_SetPosition(id[0],MinX+20+move1,MinY+40);
			Obj_SetPosition(id[1],MinX+180-move1,MinY+120);
			Obj_SetPosition(id[2],MinX+50+move1+rand(move1/100,move1/-100),MinY+265+rand(move1/100,move1/-100));
			Obj_SetPosition(id[3],MinX+180-move1,MinY+350);
			Obj_SetPosition(id[4],MinX+40+move1,MinY+430);
			Obj_SetPosition(id[5],MinX+160,MinY+150);
			ObjEffect_SetAngle(id[0],move2,move2,0);
			ObjEffect_SetAngle(id[1],move2,move2,0);
			ObjEffect_SetAngle(id[2],move2,move2,0);
			ObjEffect_SetAngle(id[3],move2,move2,0);
			ObjEffect_SetAngle(id[4],move2,move2,0);
			ObjEffect_SetAngle(id[5],100-move1+move2,100-move1+move2,-30);
		
			if(move2>=90){
				Obj_Delete(id[0]);
				Obj_Delete(id[1]);
				Obj_Delete(id[2]);
				Obj_Delete(id[3]);
				Obj_Delete(id[4]);
				Obj_Delete(id[5]);
				break;
			}
		}
		yield;
	}
}

task Load_Effect(x,y,angle,speed,kill,r,g,b,layer){
	let clm  = Obj_Create(OBJ_EFFECT);
	let randamC = rand(-1,1);
	let spin    = 0;
	let alpha   = 0;
	let alpham  = rand(50,150);
	let sca     = rand(0.1,1);
	let rkill   = rand(kill-100,kill+100);
	let killc   = 0;
	
	Obj_SetPosition(clm,x,y);
	ObjEffect_SetTexture(clm,imgl2);
	ObjEffect_SetRenderState(clm,ADD);
	ObjEffect_SetPrimitiveType(clm,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(clm,sca,sca);
	Obj_SetSpeed(clm,speed);
	Obj_SetAngle(clm,angle);
	ObjEffect_SetAngle(clm,0,0,0);
	ObjEffect_SetLayer(clm,layer);
	ObjEffect_CreateVertex(clm,4);
	ObjEffect_SetVertexXY(clm,0,50/-2,50/-2);
	ObjEffect_SetVertexXY(clm,1,50/-2,50/2);
	ObjEffect_SetVertexXY(clm,2,50/2,50/-2);
	ObjEffect_SetVertexXY(clm,3,50/2,50/2);
	ObjEffect_SetVertexUV(clm,0,0,0);
	ObjEffect_SetVertexUV(clm,1,0,50);
	ObjEffect_SetVertexUV(clm,2,50,0);
	ObjEffect_SetVertexUV(clm,3,50,50);
	ObjEffect_SetVertexColor(clm,0,alpha,255,255,255);
	ObjEffect_SetVertexColor(clm,1,alpha,255,255,255);
	ObjEffect_SetVertexColor(clm,2,alpha,255,255,255);
	ObjEffect_SetVertexColor(clm,3,alpha,255,255,255);

	loop{
		spin++;
		if(randamC>=0){ObjEffect_SetAngle(clm,0,0,spin*-1*sca);}
		if(randamC<0){ObjEffect_SetAngle(clm,0,0,spin*sca);}
		
		killc++;
		if(rkill>killc&&alpham>alpha){alpha+=5}
		if(rkill<killc&&alpha>0){alpha-=5}
		ObjEffect_SetVertexColor(clm,0,alpha,r,g,b);
		ObjEffect_SetVertexColor(clm,1,alpha,r,g,b);
		ObjEffect_SetVertexColor(clm,2,alpha,r,g,b);
		ObjEffect_SetVertexColor(clm,3,alpha,r,g,b);
		
		if(rkill<killc&&alpha<=0||OnEnemySpell==true){Obj_Delete(clm);break}
		yield;
	}
}

task Loading(x,y,loadframe){
	let load  = Obj_Create(OBJ_EFFECT);//少女祈祷中
	let load2 = Obj_Create(OBJ_EFFECT);//NowLoading...
	let alphaL  = 0;
	let alphaL2 = 0;
	let alphac  = 0;
	let kill    = 0;
	let LoadEnd = false;
	let l2move  = 0;
	let l2moveA = 0;
	let clmc    = 0;
	
	Obj_SetPosition(load,x,y);
	ObjEffect_SetTexture(load,imgl);
	ObjEffect_SetRenderState(load,ALPHA);
	ObjEffect_SetPrimitiveType(load,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(load,0.8,0.8);
	ObjEffect_SetAngle(load,0,0,0);
	ObjEffect_SetLayer(load,8);
	ObjEffect_CreateVertex(load,4);
	ObjEffect_SetVertexXY(load,0,180/-2,40/-2);
	ObjEffect_SetVertexXY(load,1,180/-2,40/2);
	ObjEffect_SetVertexXY(load,2,180/2,40/-2);
	ObjEffect_SetVertexXY(load,3,180/2,40/2);
	ObjEffect_SetVertexUV(load,0,20,10);
	ObjEffect_SetVertexUV(load,1,20,39);
	ObjEffect_SetVertexUV(load,2,180,10);
	ObjEffect_SetVertexUV(load,3,180,39);
	
	ObjEffect_SetTexture(load2,imgl);
	ObjEffect_SetRenderState(load2,ALPHA);
	ObjEffect_SetPrimitiveType(load2,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(load2,0.8,0.8);
	ObjEffect_SetAngle(load2,0,0,0);
	ObjEffect_SetLayer(load2,8);
	ObjEffect_CreateVertex(load2,4);
	ObjEffect_SetVertexXY(load2,0,192/-2,42/-2);
	ObjEffect_SetVertexXY(load2,1,192/-2,42/2);
	ObjEffect_SetVertexXY(load2,2,192/2,42/-2);
	ObjEffect_SetVertexXY(load2,3,192/2,42/2);
	ObjEffect_SetVertexUV(load2,0,4,54);
	ObjEffect_SetVertexUV(load2,1,4,96);
	ObjEffect_SetVertexUV(load2,2,196,54);
	ObjEffect_SetVertexUV(load2,3,196,96);

	loop{
		kill++;
		if(Obj_BeDeleted(load)==true&&Obj_BeDeleted(load2)==true){break}
		if(loadframe<kill){LoadEnd=true}
		if(LoadEnd==false){
			if(alphaL<255){alphaL+=15}
			if(alphaL2<255){alphaL2+=15}
			if(alphaL>=255){alphac+=5}
			
			if(l2move<70){l2moveA+=5}
			l2move=70.0*sin(l2moveA);
			Obj_SetPosition(load2,Obj_GetX(load)+100-l2move,Obj_GetY(load)+20);
			ObjEffect_SetVertexColor(load,0,alphaL,200+55*sin(alphac),200+55*sin(alphac),200+55*sin(alphac));
			ObjEffect_SetVertexColor(load,1,alphaL,200+55*sin(alphac),200+55*sin(alphac),200+55*sin(alphac));
			ObjEffect_SetVertexColor(load,2,alphaL,200+55*sin(alphac),200+55*sin(alphac),200+55*sin(alphac));
			ObjEffect_SetVertexColor(load,3,alphaL,200+55*sin(alphac),200+55*sin(alphac),200+55*sin(alphac));
			ObjEffect_SetVertexColor(load2,0,alphaL2,225+30*cos(alphac),225+30*cos(alphac),225+30*cos(alphac));
			ObjEffect_SetVertexColor(load2,1,alphaL2,225+30*cos(alphac),225+30*cos(alphac),225+30*cos(alphac));
			ObjEffect_SetVertexColor(load2,2,alphaL2,225+30*cos(alphac),225+30*cos(alphac),225+30*cos(alphac));
			ObjEffect_SetVertexColor(load2,3,alphaL2,225+30*cos(alphac),225+30*cos(alphac),225+30*cos(alphac));
		}
		if(LoadEnd==true){
			if(alphaL>0){alphaL-=15}
			if(alphaL2>0){alphaL2-=15}
			ObjEffect_SetVertexColor(load,0,alphaL,255,255,255);
			ObjEffect_SetVertexColor(load,1,alphaL,255,255,255);
			ObjEffect_SetVertexColor(load,2,alphaL,255,255,255);
			ObjEffect_SetVertexColor(load,3,alphaL,255,255,255);
			ObjEffect_SetVertexColor(load2,0,alphaL2,255,255,255);
			ObjEffect_SetVertexColor(load2,1,alphaL2,255,255,255);
			ObjEffect_SetVertexColor(load2,2,alphaL2,255,255,255);
			ObjEffect_SetVertexColor(load2,3,alphaL2,255,255,255);
		}
		
		if(alphaL<=0&&alphaL2<=0){
			Obj_Delete(load);
			Obj_Delete(load2);
		}
		
		let gox = Obj_GetX(load);
		
		clmc++;
		if(clmc==1&&LoadEnd==false){
			Load_Effect(rand(gox-100,gox+100),rand(Obj_GetY(load)-60,Obj_GetY(load)+20),45,rand(0.7,1),100,255,255,0,8);
			clmc=-8;
		}
		yield;
	}
}
