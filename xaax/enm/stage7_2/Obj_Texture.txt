task EnemyTexture(hv){//メリー
	let aeff		= Obj_Create(OBJ_EFFECT);
	let alpha		= 64;
	let scale		= 1;
	let lifemax		= GetLife;
	
	LoadGraphic(GetCurrentScriptDirectory~".\enm7_2img\enm1_dot.png");
	
	SetCommonData("Charge",false);
	SetCommonData("Attack",false);
	loop{
		ObjEffect_SetTexture(aeff,GetCurrentScriptDirectory~".\enm7_2img\enm1_dot.png");
		ObjEffect_SetRenderState(aeff,ALPHA);
		ObjEffect_SetPrimitiveType(aeff,PRIMITIVE_TRIANGLESTRIP);
		ObjEffect_SetScale(aeff,scale,scale);
		ObjEffect_SetLayer(aeff,3);
		ObjEffect_CreateVertex(aeff,4);
		if(GetSpeedX==0) {//立ち
			ObjEffect_SetVertexXY(aeff,0, 62/-2, 88/-2);
			ObjEffect_SetVertexXY(aeff,1, 62/-2, 88/2);
			ObjEffect_SetVertexXY(aeff,2, 62/2, 88/-2);
			ObjEffect_SetVertexXY(aeff,3, 62/2, 88/2);
			ObjEffect_SetVertexUV(aeff,0, 8,10);
			ObjEffect_SetVertexUV(aeff,1, 8,97);
			ObjEffect_SetVertexUV(aeff,2,70,10);
			ObjEffect_SetVertexUV(aeff,3,70,97);
			Obj_SetPosition(aeff,GetEnemyX+4,GetEnemyY-8);
		}
		if(GetSpeedX>0) {//右進行
			ObjEffect_SetVertexXY(aeff,0, 72/-2, 84/-2);
			ObjEffect_SetVertexXY(aeff,1, 72/-2, 84/2);
			ObjEffect_SetVertexXY(aeff,2, 72/2, 84/-2);
			ObjEffect_SetVertexXY(aeff,3, 72/2, 84/2);
			ObjEffect_SetVertexUV(aeff,0, 84,14);
			ObjEffect_SetVertexUV(aeff,1, 84,98);
			ObjEffect_SetVertexUV(aeff,2,156,14);
			ObjEffect_SetVertexUV(aeff,3,156,98);
			Obj_SetPosition(aeff,GetEnemyX,GetEnemyY-8);
		}
		if(GetSpeedX<0) {//左進行
			ObjEffect_SetVertexXY(aeff,0, 68/-2, 88/-2);
			ObjEffect_SetVertexXY(aeff,1, 68/-2, 88/2);
			ObjEffect_SetVertexXY(aeff,2, 68/2, 88/-2);
			ObjEffect_SetVertexXY(aeff,3, 68/2, 88/2);
			ObjEffect_SetVertexUV(aeff,0,178,12);
			ObjEffect_SetVertexUV(aeff,1,178,100);
			ObjEffect_SetVertexUV(aeff,2,245,12);
			ObjEffect_SetVertexUV(aeff,3,245,100);
			Obj_SetPosition(aeff,GetEnemyX,GetEnemyY-8);
		}
		if(GetCommonData("Charge")) {//溜め
			ObjEffect_SetVertexXY(aeff,0, 62/-2, 90/-2);
			ObjEffect_SetVertexXY(aeff,1, 62/-2, 90/2);
			ObjEffect_SetVertexXY(aeff,2, 62/2, 90/-2);
			ObjEffect_SetVertexXY(aeff,3, 62/2, 90/2);
			ObjEffect_SetVertexUV(aeff,0,262,6);
			ObjEffect_SetVertexUV(aeff,1,262,97);
			ObjEffect_SetVertexUV(aeff,2,323,6);
			ObjEffect_SetVertexUV(aeff,3,323,97);
			Obj_SetPosition(aeff,GetEnemyX,GetEnemyY-10);
		}
		if(GetCommonData("Attack")) {//攻撃
			ObjEffect_SetVertexXY(aeff,0, 70/-2, 90/-2);
			ObjEffect_SetVertexXY(aeff,1, 70/-2, 90/2);
			ObjEffect_SetVertexXY(aeff,2, 70/2, 90/-2);
			ObjEffect_SetVertexXY(aeff,3, 70/2, 90/2);
			ObjEffect_SetVertexUV(aeff,0,340,18);
			ObjEffect_SetVertexUV(aeff,1,340,106);
			ObjEffect_SetVertexUV(aeff,2,410,18);
			ObjEffect_SetVertexUV(aeff,3,410,106);
			Obj_SetPosition(aeff,GetEnemyX+3,GetEnemyY-8);
		}
		yield;
	}
	Obj_Delete(aeff);
}

task EnemyTexture03(hv){//博士
	let spn1		= Obj_Create(OBJ_EFFECT);
	let img			= GetCurrentScriptDirectory~".\enm7_2img\enm3.png";
	let A_count		= 0;
	let A_countM	= 0;
	let Animetion	= false;
	let AnimetionM	= false;
	let AR_count	= 0;
	let AL_count	= 0;
	let A_returnR	= 0;
	let A_returnL	= 0;
	let lrz			= 0;
	let cc			= 0;
	
	LoadGraphic(img);
	
	Obj_SetPosition(spn1,GetX,GetY);
	ObjEffect_SetTexture(spn1,img);
	ObjEffect_SetRenderState(spn1,ALPHA);
	ObjEffect_SetPrimitiveType(spn1,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn1,1,1);
	ObjEffect_SetLayer(spn1,3);
	ObjEffect_CreateVertex(spn1,4);
	
	loop{
		cc++;
		if(hv==true){
			Obj_SetPosition(spn1,GetX,GetY+5*sin(cc*4));
		}
		if(hv==false){
			Obj_SetPosition(spn1,GetX,GetY);
		}
		
		//この辺if文グチャグチャで気色悪い
		if(Animetion==true){A_count++;}
		if(AnimetionM==true){A_countM++;}
		if(A_count==40){A_count=0;}
		if(A_countM==40){A_countM=0;}
		if(trunc(GetSpeedX)==0){A_returnR++;A_returnL++;}
		if(GetSpeedX>0){AR_count++;AnimetionM=false;Animetion=false;}
		if(AR_count==10){AR_count=5;}
		if(GetSpeedX<0){AL_count++;AnimetionM=false;Animetion=false;}
		if(AL_count==10){AL_count=5;}
		if(trunc(GetSpeedX)==0&&A_returnR<=0){AR_count=20;}
		if(A_returnR>=5&&AR_count>0){AR_count--;}
		if(AR_count<=0){AR_count=0;A_returnR=0;AnimetionM=true;}
		if(trunc(GetSpeedX)==0&&A_returnL<=0){AL_count=20;}
		if(A_returnL>=5&&AL_count>0){AL_count--;}
		if(AL_count<=0){AL_count=0;A_returnL=0;Animetion=true;}
		
		if(AnimetionM==true){
			if(A_countM>=0  && A_countM<=20){
				ObjEffect_SetVertexXY(spn1,0,40/-2,92/-2);
				ObjEffect_SetVertexXY(spn1,1,40/-2,92/2);
				ObjEffect_SetVertexXY(spn1,2,40/2,92/-2);
				ObjEffect_SetVertexXY(spn1,3,40/2,92/2);
				ObjEffect_SetVertexUV(spn1,0,31,4);
				ObjEffect_SetVertexUV(spn1,1,31,96);
				ObjEffect_SetVertexUV(spn1,2,72,4);
				ObjEffect_SetVertexUV(spn1,3,72,96);
			}
			if(A_countM>=20 && A_countM<=40){
				ObjEffect_SetVertexXY(spn1,0,40/-2,92/-2);
				ObjEffect_SetVertexXY(spn1,1,40/-2,92/2);
				ObjEffect_SetVertexXY(spn1,2,40/2,92/-2);
				ObjEffect_SetVertexXY(spn1,3,40/2,92/2);
				ObjEffect_SetVertexUV(spn1,0,31,104);
				ObjEffect_SetVertexUV(spn1,1,31,196);
				ObjEffect_SetVertexUV(spn1,2,72,104);
				ObjEffect_SetVertexUV(spn1,3,72,196);
			}
		}
		if(Animetion==true){
			if(A_count>=0  && A_count<=20){
				ObjEffect_SetVertexXY(spn1,0,40/-2,92/-2);
				ObjEffect_SetVertexXY(spn1,1,40/-2,92/2);
				ObjEffect_SetVertexXY(spn1,2,40/2,92/-2);
				ObjEffect_SetVertexXY(spn1,3,40/2,92/2);
				ObjEffect_SetVertexUV(spn1,0,31,4);
				ObjEffect_SetVertexUV(spn1,1,31,96);
				ObjEffect_SetVertexUV(spn1,2,72,4);
				ObjEffect_SetVertexUV(spn1,3,72,96);
			}
			if(A_count>=20 && A_count<=40){
				ObjEffect_SetVertexXY(spn1,0,40/-2,92/-2);
				ObjEffect_SetVertexXY(spn1,1,40/-2,92/2);
				ObjEffect_SetVertexXY(spn1,2,40/2,92/-2);
				ObjEffect_SetVertexXY(spn1,3,40/2,92/2);
				ObjEffect_SetVertexUV(spn1,0,31,104);
				ObjEffect_SetVertexUV(spn1,1,31,196);
				ObjEffect_SetVertexUV(spn1,2,72,104);
				ObjEffect_SetVertexUV(spn1,3,72,196);
			}
		}
		if(GetSpeedX>0||GetSpeedX==0&&AnimetionM==false){
			if(AR_count>=0  && AR_count<=5 ){
				ObjEffect_SetVertexXY(spn1,0,48/-2,82/-2);
				ObjEffect_SetVertexXY(spn1,1,48/-2,82/2);
				ObjEffect_SetVertexXY(spn1,2,48/2,82/-2);
				ObjEffect_SetVertexXY(spn1,3,48/2,82/2);
				ObjEffect_SetVertexUV(spn1,0,128,9);
				ObjEffect_SetVertexUV(spn1,1,128,91);
				ObjEffect_SetVertexUV(spn1,2,175,9);
				ObjEffect_SetVertexUV(spn1,3,175,91);
			}
			if(AR_count>=5  && AR_count<=10){
				ObjEffect_SetVertexXY(spn1,0,48/-2,82/-2);
				ObjEffect_SetVertexXY(spn1,1,48/-2,82/2);
				ObjEffect_SetVertexXY(spn1,2,48/2,82/-2);
				ObjEffect_SetVertexXY(spn1,3,48/2,82/2);
				ObjEffect_SetVertexUV(spn1,0,128,109);
				ObjEffect_SetVertexUV(spn1,1,128,191);
				ObjEffect_SetVertexUV(spn1,2,175,109);
				ObjEffect_SetVertexUV(spn1,3,175,191);
			}
		}
		if(GetSpeedX<0||GetSpeedX==0&&Animetion==false){
			if(AL_count>=0  && AL_count<=5 ){
				ObjEffect_SetVertexXY(spn1,0,48/-2,82/-2);
				ObjEffect_SetVertexXY(spn1,1,48/-2,82/2);
				ObjEffect_SetVertexXY(spn1,2,48/2,82/-2);
				ObjEffect_SetVertexXY(spn1,3,48/2,82/2);
				ObjEffect_SetVertexUV(spn1,0,225,9);
				ObjEffect_SetVertexUV(spn1,1,225,91);
				ObjEffect_SetVertexUV(spn1,2,272,9);
				ObjEffect_SetVertexUV(spn1,3,272,91);
			}
			if(AL_count>=5  && AL_count<=10){
				ObjEffect_SetVertexXY(spn1,0,48/-2,82/-2);
				ObjEffect_SetVertexXY(spn1,1,48/-2,82/2);
				ObjEffect_SetVertexXY(spn1,2,48/2,82/-2);
				ObjEffect_SetVertexXY(spn1,3,48/2,82/2);
				ObjEffect_SetVertexUV(spn1,0,225,109);
				ObjEffect_SetVertexUV(spn1,1,225,191);
				ObjEffect_SetVertexUV(spn1,2,272,109);
				ObjEffect_SetVertexUV(spn1,3,272,191);
			}
		}
		yield;
	}
}

task BackGroundEffect01{//メリー
	let imgBACK1	= GetCurrentScriptDirectory~".\enm7_2img\enm1a.png";
	let imgBACK2	= GetCurrentScriptDirectory~".\enm7_2img\enm1b.png";
	let imgBACK3	= GetCurrentScriptDirectory~".\enm7_2img\enm1c.png";
	let spn1		= Obj_Create(OBJ_EFFECT);
	let spn2		= Obj_Create(OBJ_EFFECT);
	let spn3		= Obj_Create(OBJ_EFFECT);
	let cc			= 0;
	let alpha1		= 0;
	let alpha2		= 0;
	let alpha3		= 0;
	
	LoadGraphic(imgBACK1);
	LoadGraphic(imgBACK2);
	LoadGraphic(imgBACK3);
	
	Obj_SetPosition(spn1,CenX,CenY);
	ObjEffect_SetTexture(spn1,imgBACK1);
	ObjEffect_SetRenderState(spn1,ALPHA);
	ObjEffect_SetPrimitiveType(spn1,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn1,1,1);
	ObjEffect_SetLayer(spn1,0);
	ObjEffect_CreateVertex(spn1,4);
	ObjEffect_SetVertexXY(spn1,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn1,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn1,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn1,3,384/2,448/2);
	ObjEffect_SetVertexUV(spn1,0,0,0);
	ObjEffect_SetVertexUV(spn1,1,0,448);
	ObjEffect_SetVertexUV(spn1,2,384,0);
	ObjEffect_SetVertexUV(spn1,3,384,448);
	Obj_SetPosition(spn2,CenX,CenY);
	ObjEffect_SetTexture(spn2,imgBACK2);
	ObjEffect_SetRenderState(spn2,ALPHA);
	ObjEffect_SetPrimitiveType(spn2,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn2,1,1);
	ObjEffect_SetAngle(spn2,0,0,0);
	ObjEffect_SetLayer(spn2,0);
	ObjEffect_CreateVertex(spn2,4);
	ObjEffect_SetVertexXY(spn2,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn2,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn2,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn2,3,384/2,448/2);
	ObjEffect_SetVertexUV(spn2,0,0,0);
	ObjEffect_SetVertexUV(spn2,1,0,448);
	ObjEffect_SetVertexUV(spn2,2,384,0);
	ObjEffect_SetVertexUV(spn2,3,384,448);
	Obj_SetPosition(spn3,CenX,CenY);
	ObjEffect_SetTexture(spn3,imgBACK3);
	ObjEffect_SetRenderState(spn3,ALPHA);
	ObjEffect_SetPrimitiveType(spn3,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn3,-1,1);
	ObjEffect_SetLayer(spn3,0);
	ObjEffect_CreateVertex(spn3,4);
	ObjEffect_SetVertexXY(spn3,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn3,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn3,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn3,3,384/2,448/2);
	ObjEffect_SetVertexUV(spn3,0,0,0);
	ObjEffect_SetVertexUV(spn3,1,0,448);
	ObjEffect_SetVertexUV(spn3,2,384,0);
	ObjEffect_SetVertexUV(spn3,3,384,448);
	
	loop{
		cc+=2;
		if(alpha1<240){alpha1+=15;}
		if(alpha2<255){alpha2+=15;}
		
		ObjEffect_SetVertexColor(spn1,0,alpha2,100,100,50);
		ObjEffect_SetVertexColor(spn1,1,alpha2,100,100,50);
		ObjEffect_SetVertexColor(spn1,2,alpha2,100,100,50);
		ObjEffect_SetVertexColor(spn1,3,alpha2,100,100,50);
		ObjEffect_SetVertexColor(spn2,0,alpha1,150,150,150);
		ObjEffect_SetVertexColor(spn2,1,alpha1,150,150,150);
		ObjEffect_SetVertexColor(spn2,2,alpha1,150,150,150);
		ObjEffect_SetVertexColor(spn2,3,alpha1,150,150,150);
		ObjEffect_SetVertexColor(spn3,0,alpha1,50+50*sin(cc),0+50*sin(cc),0);
		ObjEffect_SetVertexColor(spn3,1,alpha1,50+50*sin(cc),0+50*sin(cc),0);
		ObjEffect_SetVertexColor(spn3,2,alpha1,50+50*sin(cc),0+50*sin(cc),0);
		ObjEffect_SetVertexColor(spn3,3,alpha1,50+50*sin(cc),0+50*sin(cc),0);
		ObjEffect_SetVertexUV(spn1,0,0,0-cc);
		ObjEffect_SetVertexUV(spn1,1,0,448-cc);
		ObjEffect_SetVertexUV(spn1,2,384,0-cc);
		ObjEffect_SetVertexUV(spn1,3,384,448-cc);
		ObjEffect_SetVertexUV(spn3,0,0,0+cc);
		ObjEffect_SetVertexUV(spn3,1,0,448+cc);
		ObjEffect_SetVertexUV(spn3,2,384,0+cc);
		ObjEffect_SetVertexUV(spn3,3,384,448+cc);
		yield;
	}
}

task BackGroundEffect03{//博士
	let imgBACK1	= GetCurrentScriptDirectory~".\enm7_2img\enm3a.png";
	let imgBACK2	= GetCurrentScriptDirectory~".\enm7_2img\enm3b.png";
	let imgBACK3	= GetCurrentScriptDirectory~".\enm7_2img\enm3c.png";
	let spn1		= Obj_Create(OBJ_EFFECT);
	let spn4		= Obj_Create(OBJ_EFFECT);
	let spn2		= Obj_Create(OBJ_EFFECT);
	let spn3		= Obj_Create(OBJ_EFFECT);
	let cc			= 0;
	let alpha1		= 0;
	let alpha2		= 0;
	
	LoadGraphic(imgBACK1);
	LoadGraphic(imgBACK2);
	LoadGraphic(imgBACK3);
	
	Obj_SetPosition(spn1,CenX,CenY);
	ObjEffect_SetTexture(spn1,imgBACK1);
	ObjEffect_SetRenderState(spn1,ALPHA);
	ObjEffect_SetPrimitiveType(spn1,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn1,1,1);
	ObjEffect_SetLayer(spn1,0);
	ObjEffect_CreateVertex(spn1,4);
	ObjEffect_SetVertexXY(spn1,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn1,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn1,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn1,3,384/2,448/2);
	ObjEffect_SetVertexUV(spn1,0,0,0);
	ObjEffect_SetVertexUV(spn1,1,0,448);
	ObjEffect_SetVertexUV(spn1,2,384,0);
	ObjEffect_SetVertexUV(spn1,3,384,448);
	Obj_SetPosition(spn2,CenX,CenY);
	ObjEffect_SetTexture(spn2,imgBACK1);
	ObjEffect_SetRenderState(spn2,SUBTRACT);
	ObjEffect_SetPrimitiveType(spn2,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn2,1,1);
	ObjEffect_SetAngle(spn2,0,0,0);
	ObjEffect_SetLayer(spn2,0);
	ObjEffect_CreateVertex(spn2,4);
	ObjEffect_SetVertexXY(spn2,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn2,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn2,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn2,3,384/2,448/2);
	Obj_SetPosition(spn3,CenX,CenY);
	ObjEffect_SetTexture(spn3,imgBACK2);
	ObjEffect_SetRenderState(spn3,ALPHA);
	ObjEffect_SetPrimitiveType(spn3,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn3,1,1);
	ObjEffect_SetAngle(spn3,0,0,0);
	ObjEffect_SetLayer(spn3,0);
	ObjEffect_CreateVertex(spn3,4);
	ObjEffect_SetVertexXY(spn3,0,384/-2,448/-2);
	ObjEffect_SetVertexXY(spn3,1,384/-2,448/2);
	ObjEffect_SetVertexXY(spn3,2,384/2,448/-2);
	ObjEffect_SetVertexXY(spn3,3,384/2,448/2);
	ObjEffect_SetVertexUV(spn3,0,0,0);
	ObjEffect_SetVertexUV(spn3,1,0,384);
	ObjEffect_SetVertexUV(spn3,2,384,0);
	ObjEffect_SetVertexUV(spn3,3,384,384);
	Obj_SetPosition(spn4,CenX,CenY);
	ObjEffect_SetTexture(spn4,imgBACK3);
	ObjEffect_SetRenderState(spn4,ALPHA);
	ObjEffect_SetPrimitiveType(spn4,PRIMITIVE_TRIANGLESTRIP);
	ObjEffect_SetScale(spn4,1.3,1.3);
	ObjEffect_SetAngle(spn4,0,0,0);
	ObjEffect_SetLayer(spn4,0);
	ObjEffect_CreateVertex(spn4,4);
	ObjEffect_SetVertexXY(spn4,0,400/-2,400/-2);
	ObjEffect_SetVertexXY(spn4,1,400/-2,400/2);
	ObjEffect_SetVertexXY(spn4,2,400/2,400/-2);
	ObjEffect_SetVertexXY(spn4,3,400/2,400/2);
	ObjEffect_SetVertexUV(spn4,0,0,0);
	ObjEffect_SetVertexUV(spn4,1,0,400);
	ObjEffect_SetVertexUV(spn4,2,400,0);
	ObjEffect_SetVertexUV(spn4,3,400,400);
	
	loop{
		cc++;
		ObjEffect_SetVertexUV(spn1,0,0,0+cc);
		ObjEffect_SetVertexUV(spn1,1,0,448+cc);
		ObjEffect_SetVertexUV(spn1,2,384,0+cc);
		ObjEffect_SetVertexUV(spn1,3,384,448+cc);
		ObjEffect_SetVertexUV(spn2,0,0,0+cc*2);
		ObjEffect_SetVertexUV(spn2,1,0,448+cc*2);
		ObjEffect_SetVertexUV(spn2,2,384,0+cc*2);
		ObjEffect_SetVertexUV(spn2,3,384,448+cc*2);
		ObjEffect_SetVertexUV(spn3,0,0,0-cc*2);
		ObjEffect_SetVertexUV(spn3,1,0,448-cc*2);
		ObjEffect_SetVertexUV(spn3,2,384,0-cc*2);
		ObjEffect_SetVertexUV(spn3,3,384,448-cc*2);
		
		ObjEffect_SetAngle(spn4,0,0,cc/5);
		
		if(alpha1<255){alpha1+=15;}
		if(alpha2<155){alpha2+=15;}
		ObjEffect_SetVertexColor(spn1,0,alpha1,200,200,200);
		ObjEffect_SetVertexColor(spn1,1,alpha1,200,200,200);
		ObjEffect_SetVertexColor(spn1,2,alpha1,200,200,200);
		ObjEffect_SetVertexColor(spn1,3,alpha1,200,200,200);
		ObjEffect_SetVertexColor(spn2,0,alpha1,0,255,255);
		ObjEffect_SetVertexColor(spn2,1,alpha1,0,255,255);
		ObjEffect_SetVertexColor(spn2,2,alpha1,0,255,255);
		ObjEffect_SetVertexColor(spn2,3,alpha1,0,255,255);
		ObjEffect_SetVertexColor(spn3,0,alpha1,255,255,255);
		ObjEffect_SetVertexColor(spn3,1,alpha1,255,255,255);
		ObjEffect_SetVertexColor(spn3,2,alpha1,255,255,255);
		ObjEffect_SetVertexColor(spn3,3,alpha1,255,255,255);
		ObjEffect_SetVertexColor(spn4,0,alpha1,0,0,0);
		ObjEffect_SetVertexColor(spn4,1,alpha1,150,150,100);
		ObjEffect_SetVertexColor(spn4,2,alpha1,150,150,100);
		ObjEffect_SetVertexColor(spn4,3,alpha1,0,0,0);
		yield;
	}
}
